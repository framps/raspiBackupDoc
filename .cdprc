#!/usr/bin/env bash
# vim: set expandtab:

# Open two files with vertical split, if possible:
#   - vim -O <file> <file>
#   - micro -multiopen=vsplit <file> <file>
# Geany doesn't have a real split window feature
#   - geany <file> <file>

EDIT_IN_SPLIT_WINDOWS="vim -O"
EDIT_IN_TABS="vim -p"

echo -e "\n*** Define helpful functions and aliases:\n"

edit_translate_already_translated() {
    if command -pv fzf >/dev/null ; then
        while true; do
            FILE=$(cd de/src || exit ; rg --files-with-matches "^\[\.status\]:\s\s*translated" -- *.md | sort | fzf --reverse --exact --preview='cat {}' --header=">> Please select file to check translation and press ENTER. (ESC to cancel.) <<")
            [ -z "$FILE" ] && break
            eval "${EDIT_IN_SPLIT_WINDOWS}" {de,en}/src/"$FILE"
        done
    else
        (cd de/src || exit ; rg --files-with-matches "^\[\.status\]:\s\s*translated" -- *.md | sort)
        read -r -p "Continue? ENTER, or Ctrl-C to cancel: " inp
        for FILE in $(cd de/src || exit ; rg --files-with-matches "^\[\.status\]:\s\s*translated" -- *.md | sort)
        do
            eval "${EDIT_IN_SPLIT_WINDOWS}" {de,en}/src/"$FILE"
            read -r -p "Continue? ENTER, or Ctrl-C to cancel: " inp
            echo  "$inp"
        done
    fi
}

edit_translate_all_rft() {
    if command -pv fzf >/dev/null ; then
        while true; do
            FILE=$(cd de/src || exit ; rg --files-with-matches " rft" -- *.md | sort | fzf --reverse --exact --preview='cat {}' --header=">> Please select file to translate and press ENTER. (ESC to cancel.) <<")
            [ -z "$FILE" ] && break
            eval "${EDIT_IN_SPLIT_WINDOWS}" {de,en}/src/"$FILE"
        done
    else
        (cd de/src || exit ; rg --files-with-matches " rft" -- *.md | sort)
        read -r -p "Continue? ENTER, or Ctrl-C to cancel: " inp
        for FILE in $(cd de/src || exit ; rg --files-with-matches " rft" -- *.md | sort)
        do
            eval "${EDIT_IN_SPLIT_WINDOWS}" {de,en}/src/"$FILE"
            read -r -p "Continue? ENTER, or Ctrl-C to cancel: " inp
            echo  "$inp"
        done
    fi
}

edit_by_status() {
    if command -pv fzf >/dev/null ; then
        while true; do
            shopt -s extglob
            WITHOUT_STATUS=$(rg --files-without-match --glob="**/*.md" "^\[\.status\]:" | wc -l)
            STATUS=$( (rg "^\[\.status\]:" --no-filename --glob="**/*.md" | sort | uniq -c ; printf "%7d %s" "${WITHOUT_STATUS}" "[]: --NO-STATUS--") | fzf --reverse --select-1 --exact --preview='V={}; V="${V#*\]:}"; V=${V//\?/.} ; (if [ "${V}" == " --NO-STATUS--" ] ; then rg --files-without-match "^\[\.status\]:" --glob="**/*.md" ; else rg --files-with-matches "^\[\.status\]:${V}$"  --glob="**/*.md" ; fi) | sort' --header=">> Please select file to edit and press ENTER. (ESC to cancel.) <<")
            [ -z "$STATUS" ] && break
            VALUE="${STATUS#*\]:}"
            VALUE=${VALUE//\?/.}
            while true; do
                if [ "${VALUE}" == " --NO-STATUS--" ] ; then
                    IFS=$'\n' FILES=($(rg --files-without-match "^\[\.status\]:" --glob="**/*.md" | sort | fzf --reverse --exact --multi --bind alt-a:select-all,alt-d:deselect-all --preview='cat {}' --header=">> Please select file to edit and press ENTER. (ESC to cancel.) <<"))
                else
                    # Solution for opening multiple file found here:
                    # https://github-wiki-see.page/m/junegunn/fzf/wiki/examples (Section "Opening files")
                    # Otherwise the LF isn't interpreted correctly by the editor.
                    IFS=$'\n' FILES=($(rg --files-with-matches "^\[\.status\]:${VALUE}$" --glob="**/*.md" | sort | fzf --reverse --exact --multi --bind alt-a:select-all,alt-d:deselect-all --preview='cat {}' --header=">> Please select file to edit and press ENTER. (ESC to cancel.) <<"))
                fi
                [ -z "$FILES" ] && break
                # see https://www.shellcheck.net/wiki/SC2294
                # see https://www.shellcheck.net/wiki/SC2086
                # see https://www.shellcheck.net/wiki/SC2048
                # TODO: check, optimize or whatever...
                eval "${EDIT_IN_TABS}" ${FILES[*]@Q}
            done
        done
    fi
}


alias vibs='EDIT_IN_TABS="vim -p" edit_by_status'
alias vitar='EDIT_IN_SPLIT_WINDOWS="vim -O" edit_translate_all_rft'
alias vitat='EDIT_IN_SPLIT_WINDOWS="vim -O" edit_translate_already_translated'
alias vids='vimdiff -c "syntax off" {de,en}/src/SUMMARY.md'

alias mibs='EDIT_IN_TABS="micro" edit_by_status'
alias mitar='EDIT_IN_SPLIT_WINDOWS="micro -multiopen=vsplit" edit_translate_all_rft'
alias mitat='EDIT_IN_SPLIT_WINDOWS="micro -multiopen=vsplit" edit_translate_already_translated'

alias gebs='EDIT_IN_TABS="geany" edit_by_status'
alias getar='EDIT_IN_SPLIT_WINDOWS="geany" edit_translate_all_rft'
alias getat='EDIT_IN_SPLIT_WINDOWS="geany" edit_translate_already_translated'

alias vibs
alias vitar
alias vitat
alias vids

echo ""

alias mibs
alias mitar
alias mitat

echo ""

alias gebs
alias getar
alias getat

echo ""
echo ""


check_ssh_id() {
    IDFILE="$1"
    [ -f "$IDFILE" ] || return 1
    echo "$2"
    if ! ssh-add -T "$IDFILE" 2>/dev/null
    then
        ssh-add "$IDFILE"
    fi
    ssh-add -T "$IDFILE"
}

echo "*** Check/unlock SSH keys (and set possibly more private settings):"
echo ""

# Examples, can/should be set to real values in .private-conf.sh
#check_ssh_id  ~/.ssh/id_my_github    "Checking ssh key(s) for GitHub ..."
#check_ssh_id  ~/.ssh/id_my_webserver "Checking ssh key(s) for webserver ..."
#export WEBSERVER="user:DUMMYPASSWORD@myserver.com"
#export WEBSERVER_ROOTDIR="httpdocs"
source .private-conf.sh

cat <<EOF


*******************************************************************************

This project directory is for maintaining the 'raspiBackup' documentation.

There are some aliases defined as shown above.

The directory is tracked by git and is connected to the git repo listed below.

*******************************************************************************


EOF

