#!/usr/bin/env bash
# vim: set expandtab:

# Script for defining helpful functions etc. while working on raspiBackupDoc.
#
# It's usually part of 'cdp', but can be used independently by just sourcing it.
#
#
# Note: ripgrep(rg) respects e.g. '.gitignore', so possibly ignored file therein
#       are ignored by ripgrep as well!
#
# Note: There might be an optional file '.rgignore_cdprc' in the project root
#       directory.
#       It contains file names to be ignored by ripgrep (rg). One per line.
#       That way it's possible to exclude e.g. the meta docu (README.md etc.)
#       from being listed as well when using the below helper tools.
#       But that does only work as intended as long there are no commandline
#       parameters regarding files to search (like --glob)!
#       In contrast: --type=markdown is okay here.
#
# Note: Some hints regarding different editors:
#       Open two files with vertical split, if possible:
#           - vim -O <file> <file>
#           - micro -multiopen=vsplit <file> <file>
#       Geany doesn't have a real split window feature
#           - geany <file> <file>
#
#       So in this version of the script only 'vim' is supported.

MISSING=()
for TOOL in vim fzf rg ; do
    if ! command -pv "$TOOL" >/dev/null; then
        echo "$TOOL can't be found!"
        MISSING+=("$TOOL")
    fi
done
if [[ "${MISSING[*]}" ]] ; then
    echo "The programs 'vim', 'fzf' (fuzzy finder) and 'ripgrep'/'rg' are required!"
    echo "Please install: ${MISSING[*]}. Usually using your distros package management."
    return 1
fi

FZF_VERSION=$(fzf --version | awk '{print $1}')
if [[ "$FZF_VERSION" < "0.53.0" ]] ; then
    echo "Problem: The installed program 'fzf' ${FZF_VERSION} is too old."
    echo "At least version 0.53.0 is required."
    echo "If your distro doesn't provide a recent version you might want to look at"
    echo "https://github.com/junegunn/fzf/releases  for binary releases."
    return 1
fi

export EDIT_IN_SPLIT_WINDOWS="vim -O"
export EDIT_IN_TABS="vim -p"

# Since arrays are not exportable(!?) as required for e.g. __list_files_with_status
# a normal variable is used for that:
unset RG RG_IGN
export RG="rg --type=markdown --no-ignore-parent"
if [[ -f .rgignore_cdprc ]] ; then
	export RG_IGN="${RG} --ignore-file=.rgignore_cdprc"
else
	export RG_IGN="${RG}"
fi

unset FZF FZF_MULTI
export FZF="fzf --reverse --exact --no-sort --bind=left:abort,right:accept"
export FZF_MULTI="${FZF} --multi --bind alt-a:select-all,alt-d:deselect-all"


unset FZFPOS

edit_translate_by_status() {
    while true; do
        TMPFILE=$( mktemp tmp.XXXXXXXX )
        FILE=$(cd de/src || exit
               # shellcheck disable=2086  # to get the RG_OPTION word-splitted
               ${RG} --files-with-matches "$1" 2>/dev/null | sort \
               | tee "../../${TMPFILE}" \
               | ${FZF} \
                    --header="$FZF_HEADER" \
                    --bind="load:pos($FZFPOS)" \
                    --preview='cat {}')
        [ -z "$FILE" ] && break
        unset FZFPOS
        # remember position of selected entry to be able to re-position fzf to it
        if [[ -f "${TMPFILE}" ]] ; then
            FZFPOS=$( grep "${FILE}" < <(nl "${TMPFILE}") | awk '{print $1}' )
            rm -f "${TMPFILE}"
        fi
        ${EDIT_IN_SPLIT_WINDOWS} {de,en}/src/"$FILE"
    done
    [[ -f "${TMPFILE}" ]] && rm -f "${TMPFILE}"
    unset FZFPOS
}


edit_translate_already_translated() {
    FZF_HEADER=">> Please select file to check translation and press ENTER. (ESC to cancel.) <<"
    edit_translate_by_status "^\[\.status\]:\s\s*translated"
}

edit_translate_all_rft() {
    FZF_HEADER=">> Please select file to translate and press ENTER. (ESC to cancel.) <<"
    edit_translate_by_status " rft"
}

export -f edit_translate_by_status edit_translate_all_rft  edit_translate_already_translated

get_escaped_status () {
    # Remove the prefix to keep only the status text itself.
    # Escape many regex special characters with '\'
    # because they would break the regex expression above and below
    # as they are meant to be normal characters here.
    #
    # Example:  [.status]: todo "Check the remaining english-only file(s)"
    #     ==>    todo "Check the remaining english-only file\(s\)"
    # shellcheck disable=2001
    sed -e 's/\([][\?\|()\{\}.*\+\$^]\)/\\\1/g' <<< "${1#*\]:}"
}

# ------------------------------------------------------------------------
# NOTE: The following two functions are special,
#       because the are used within 'fzf's preview option!!!
#       So the quoting and the backslash handling are different
#       compared to the almost identical function above.

__get_escaped_status () {
    # shellcheck disable=2001
    sed -e "s/\([][\?\|()\{\}.*\+\$^]\)/\\\\\1/g" <<< "${1#*\]:}"
}

__list_files_with_status() {
    V=$(__get_escaped_status "$1" )
    if [ "${V}" == " --NO-STATUS--" ] ; then
        # shellcheck disable=2086  # to get the RG_OPTION word-splitted
        ${RG_IGN} --files-without-match "^\[\.status\]:" 2>/dev/null | sort
    else
        # shellcheck disable=2086  # to get the RG_OPTION word-splitted
        ${RG_IGN} --files-with-matches  "^\[\.status\]:${V}$" 2>/dev/null | sort
    fi
}

export -f __list_files_with_status __get_escaped_status
# ------------------------------------------------------------------------


edit_by_status() {
    if command -pv fzf >/dev/null ; then
        while true; do
            FZF_HEADER=">> Please select status and press ENTER to list and edit corresponding files. (ESC to cancel.) <<"
            shopt -s extglob               # disabled by default
            # shellcheck disable=2086  # to get the RG_OPTION word-splitted
            WITHOUT_STATUS=$(${RG_IGN} --files-without-match "^\[\.status\]:" 2>/dev/null | wc -l)
            # shellcheck disable=2016,2086  # Expressions don't expand in single quotes, use double quotes for that.
            # Because that string is passed to fzf's preview option!
            STATUS=$( (${RG_IGN} --no-filename "^\[\.status\]:" 2>/dev/null \
                       | sort | uniq -c
                      (( WITHOUT_STATUS > 0 )) && printf "%7d %s" "${WITHOUT_STATUS}" "[]: --NO-STATUS--") \
                      | ${FZF} \
                           --header="${FZF_HEADER}" \
                           --bind="alt-r:execute(bash -c edit_translate_all_rft)" \
                           --bind="alt-t:execute(bash -c edit_translate_already_translated)" \
                           --bind="alt-s:execute(vimdiff -c 'syntax off' {de,en}/src/SUMMARY.md)" \
                           --preview='V={}; __list_files_with_status "$V"')

            # Note: If it's not possible to use fzf in version 0.53 or higher,
            #       the line above calling vimdiff needs to be changed to:
            #
            #       --bind="alt-s:execute(vimdiff -c 'syntax off' {de,en}/src/SUMMARY.md < /dev/tty > /dev/tty 2>&1 )" \
            #
            # Explanations see here:
            #   https://github.com/junegunn/fzf/issues/1593
            #   https://github.com/junegunn/fzf/issues/1360.
            #   https://github.com/junegunn/fzf/issues/1361

            [ -z "$STATUS" ] && break

            VALUE=$( get_escaped_status "$STATUS" )
            FZF_HEADER=">> Please select file(s) to edit and press ENTER. (ESC to cancel.) <<"
            while true; do
                TMPFILE=$( mktemp tmp.XXXXXXXX )
                if [ "${VALUE}" == " --NO-STATUS--" ] ; then
                    # shellcheck disable=2086  # to get the RG_OPTION word-splitted
                    mapfile -t FILES < <(${RG_IGN} --files-without-match "^\[\.status\]:" 2>/dev/null \
                                         | sort | tee "${TMPFILE}" \
                                         | ${FZF_MULTI} \
                                              --header="${FZF_HEADER}" \
                                              --bind="load:pos($FZFPOS)" \
                                              --preview='cat {}')
                else
                    # Solutions for opening multiple file found here:
                    # https://github-wiki-see.page/m/junegunn/fzf/wiki/examples (Section "Opening files")
                    # Otherwise the LFs aren't interpreted correctly by the editor.
                    # But shellcheck complained with SC2207...  https://www.shellcheck.net/wiki/SC2207
                    # And so it is now:
                    # shellcheck disable=2086  # to get the RG_OPTION word-splitted
                    mapfile -t FILES < <(${RG_IGN} --files-with-matches "^\[\.status\]:${VALUE}$" 2>/dev/null \
                                         | sort | tee "${TMPFILE}" \
                                         | ${FZF_MULTI} \
                                              --header="${FZF_HEADER}" \
                                              --bind="load:pos($FZFPOS)" \
                                              --bind="left:abort" \
                                              --bind="right:accept" \
                                              --preview='cat {}')
                fi
                [[ "${FILES[*]}" ]] || break
                unset FZFPOS
                # remember position of (first) selected entry to be able to re-position fzf to it
                if [[ -f "${TMPFILE}" ]] ; then
                    FZFPOS=$( grep "${FILES[0]}" < <(nl "${TMPFILE}") | awk '{print $1}' )
                    rm -f "${TMPFILE}"
                fi
                ${EDIT_IN_TABS} "${FILES[@]}"
            done
            [[ -f "${TMPFILE}" ]] && rm -f "${TMPFILE}"
            unset FZFPOS
        done
    fi
}


alias vibs='EDIT_IN_TABS="vim -p" edit_by_status'


check_ssh_id() {
    IDFILE="$1"
    [ -f "$IDFILE" ] || return 1
    echo "$2"
    if ! ssh-add -T "$IDFILE" 2>/dev/null
    then
        ssh-add "$IDFILE"
    fi
    ssh-add -T "$IDFILE"
}

if [[ -f .private-conf.sh ]] ; then
    echo "*** Check/unlock SSH keys (and set possibly more private settings):"
    echo ""
    # Examples, can/should be set to real values in .private-conf.sh
    #check_ssh_id  ~/.ssh/id_my_github    "Checking ssh key(s) for GitHub ..."
    #check_ssh_id  ~/.ssh/id_my_webserver "Checking ssh key(s) for webserver ..."
    #export WEBSERVER="user:DUMMYPASSWORD@myserver.com"
    #export WEBSERVER_ROOTDIR="httpdocs"
    source .private-conf.sh
fi


cat <<EOF


*******************************************************************************

This project directory is for maintaining the 'raspiBackup' documentation.

A new command (alias) 'vibs' is defined now. ("vi by status")

It starts a TUI for selecting files by their status for normal editing.

Within the main screen of the TUI there are additional hotkeys active:

  * Alt-R / Alt-T for more selection screens, meant for supporting translation.
    They list files "(R)eady for translation" / "(T)ranslated" and open
    the selected file in both language versions in a split editor window.

  * Alt-S for calling 'vimdiff' with the SUMMARY.md files of both languages.

*******************************************************************************


EOF
