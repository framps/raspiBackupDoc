#!/usr/bin/env bash
# vim: set expandtab:

# Script for defining helpful functions etc. while working on raspiBackupDoc.
#
# It's usually part of 'cdp', but can be used independently by just sourcing it.
#
#
# Note: ripgrep(rg) respects e.g. '.gitignore', so possibly ignored file therein
#       are ignored by ripgrep as well!
#
# Note: There might be an optional file '.rgignore_cdprc' in the project root
#       directory.
#       It contains file names to be ignored by ripgrep (rg). One per line.
#       That way it's possible to exclude e.g. the meta docu (README.md etc.)
#       from being listed as well when using the below helper tools.
#       But that does only work as intended as long there are no commandline
#       parameters regarding files to search (like --glob)!
#       In contrast: --type=markdown is okay here.
#
# Note: Some hints regarding different editors:
#       Open two files with vertical split, if possible:
#           - vim -O <file> <file>
#           - micro -multiopen=vsplit <file> <file>
#       Geany doesn't have a real split window feature
#           - geany <file> <file>
#
#       So in this version of the script only 'vim' is supported.

MISSING_TOOLS=()
for TOOL in vim fzf rg ; do
    if ! command -pv "$TOOL" >/dev/null; then
        echo "$TOOL can't be found!"
        MISSING_TOOLS+=("$TOOL")
    fi
done

unset BAT
if command -pv batcat >/dev/null; then
    BAT=batcat
else
    if command -pv bat >/dev/null; then
        BAT=bat
    fi
fi

if [ -z "$BAT" ] ; then
    echo "'bat'/'batcat' can't be found!"
    MISSING_TOOLS+=("bat")
fi

if [[ "${MISSING_TOOLS[*]}" ]] ; then
    echo "The programs 'vim', 'fzf' (fuzzy finder), 'ripgrep'/'rg' and 'bat'/'batcat' are required!"
    echo "Please install: ${MISSING_TOOLS[*]}. Usually using your distros package management."
    return 1
fi

FZF_VERSION=$(fzf --version | awk '{print $1}')
if [[ "$FZF_VERSION" < "0.53.0" ]] ; then
    echo "Problem: The installed program 'fzf' ${FZF_VERSION} is too old."
    echo "At least version 0.53.0 is required."
    echo "If your distro doesn't provide a recent version you might want to look at"
    echo "https://github.com/junegunn/fzf/releases  for binary releases."
    return 1
fi

export BAT

export EDIT_IN_SPLIT_WINDOWS="vim -O"
export EDIT_IN_TABS="vim -p"

# Since arrays are not exportable(!?) as required for e.g. __list_files_with_status
# a normal variable is used for that:
unset RG RG_IGN
export RG="rg --type=markdown --no-ignore-parent"
if [[ -f .rgignore_cdprc ]] ; then
    export RG_IGN="${RG} --ignore-file=.rgignore_cdprc"
else
    export RG_IGN="${RG}"
fi

export RG RG_IGN

unset FZF FZF_MULTI
export FZF="fzf --reverse --exact --no-sort --bind=left:abort,right:accept"
export FZF_MULTI="${FZF} --multi --bind alt-a:select-all,alt-d:deselect-all"


unset FZFPOS_STATUS FZFPOS_FILE

edit_translate_by_status() {
    while true; do
        TMPFILE=$( mktemp tmp.XXXXXXXX )
        FILE=$(cd de/src || exit
               # shellcheck disable=2086  # to get the RG_OPTION word-splitted
               ${RG_IGN} --files-with-matches "$1" 2>/dev/null | sort \
               | tee "../../${TMPFILE}" \
               | ${FZF} \
                    --header="$FZF_HEADER" \
                    --bind="load:pos($FZFPOS_STATUS)" \
                    --preview='cat {}')
        [ -z "$FILE" ] && break
        unset FZFPOS_STATUS
        # remember position of selected entry to be able to re-position fzf to it
        if [[ -f "${TMPFILE}" ]] ; then
            FZFPOS_STATUS=$( grep "${FILE}" < <(nl "${TMPFILE}") | awk '{print $1}' )
            rm -f "${TMPFILE}"
        fi
        ${EDIT_IN_SPLIT_WINDOWS} {de,en}/src/"$FILE"
    done
    [[ -f "${TMPFILE}" ]] && rm -f "${TMPFILE}"
    unset FZFPOS_STATUS
}


edit_translate_already_translated() {
    FZF_HEADER=">> Please select file to check translation and press ENTER. (ESC to cancel.) <<"
    edit_translate_by_status "^\[\.status\]:\s\s*translated"
}

edit_translate_all_rft() {
    FZF_HEADER=">> Please select file to translate and press ENTER. (ESC to cancel.) <<"
    edit_translate_by_status "^\[\.status\]:\s\s*rft"
}

export -f edit_translate_by_status edit_translate_all_rft  edit_translate_already_translated


edit_grepped() {

    # Originally from
    # https://github.com/junegunn/fzf/blob/master/ADVANCED.md#switching-between-ripgrep-mode-and-fzf-mode-using-a-single-key-binding

    # Switch between Ripgrep mode and fzf filtering mode (ALT-G)
    rm -f /tmp/rg-fzf-{r,f}
    RG_PREFIX="${RG_IGN} --column --line-number --no-heading --color=always --smart-case "
    INITIAL_QUERY="${*:-}"
    # shellcheck disable=2016
    fzf --ansi --disabled --query "$INITIAL_QUERY" \
        --no-sort \
        --exact \
        --bind "start:reload:$RG_PREFIX {q} | sort --version-sort --reverse" \
        --bind "change:reload:sleep 0.1; $RG_PREFIX {q} | sort --version-sort --reverse || true" \
        --bind 'alt-g:transform:[[ ! $FZF_PROMPT =~ ripgrep ]] &&
          echo "rebind(change)+change-prompt(1. ripgrep> )+disable-search+transform-query:echo \{q} > /tmp/rg-fzf-f; cat /tmp/rg-fzf-r" ||
          echo "unbind(change)+change-prompt(2. fzf> )+enable-search+transform-query:echo \{q} > /tmp/rg-fzf-r; cat /tmp/rg-fzf-f"' \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --prompt '1. ripgrep> ' \
        --delimiter : \
        --header 'ALT-G: Switch between ripgrep/fzf' \
        --preview "${BAT} --color=always --theme=ansi {1} --highlight-line {2}" \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
        --bind 'enter:become(vim {1} +{2})'
}

export -f edit_grepped


get_escaped_status () {
    # Remove the prefix to keep only the status text itself.
    # Escape many regex special characters with '\'
    # because they would break the regex expression above and below
    # as they are meant to be normal characters here.
    #
    # Example:  [.status]: todo "Check the remaining english-only file(s)"
    #     ==>    todo "Check the remaining english-only file\(s\)"
    # shellcheck disable=2001
    sed -e 's/^\s*//' -e 's/\([][\?\|()\{\}.*\+\$^]\)/\\\1/g' <<< "${1#*\]:}"
}

# ------------------------------------------------------------------------
# NOTE: The following two functions are special,
#       because the are used within 'fzf's preview option!!!
#       So the quoting and the backslash handling are different
#       compared to the almost identical function above.

__get_escaped_status () {
    # shellcheck disable=2001
    sed -e "s/^\s*//" -e "s/\([][\?\|()\{\}.*\+\$^]\)/\\\\\1/g" <<< "${1#*\]:}"
}

__list_files_with_status() {
    V=$(__get_escaped_status "$1" )
    case "${V}" in
        "--ALL-MD-FILES--")
            ${RG_IGN} --files-with-matches  "" 2>/dev/null | sort
            ;;
        "--NO-STATUS--")
            # shellcheck disable=2086  # to get the RG_OPTION word-splitted
            ${RG_IGN} --files-without-match "^\[\.status\]:" 2>/dev/null | sort
            ;;
        *)
            # shellcheck disable=2086  # to get the RG_OPTION word-splitted
            ${RG_IGN} --files-with-matches  "^\[\.status\]:\s\s*${V}$" 2>/dev/null | sort
            ;;
    esac
}

export -f __list_files_with_status __get_escaped_status
# ------------------------------------------------------------------------


edit_by_status() {
    while true; do
        FZF_HEADER=">> Please select status and press ENTER to list and edit corresponding files. (ESC to cancel.) <<"
        shopt -s extglob               # disabled by default
        TMPFILE=$( mktemp tmp.XXXXXXXX )
        ALL_MD_FILES=$( __list_files_with_status "--ALL-MD-FILES--" | wc -l)
        WITHOUT_STATUS=$( __list_files_with_status "--NO-STATUS--"| wc -l)
        # shellcheck disable=2016,2086  # Expressions don't expand in single quotes, use double quotes for that.
        # Because that string is passed to fzf's preview option!
        STATUS=$( (${RG_IGN} --no-filename "^\[\.status\]:" 2>/dev/null \
                   | sort | uniq -c
                   (( WITHOUT_STATUS > 0 )) && printf "%7d %s\n" "${WITHOUT_STATUS}" "[]: --NO-STATUS--"
                   printf "%7d %s\n" "${ALL_MD_FILES}" "[]: --ALL-MD-FILES--"
                   ) \
                   | tee "${TMPFILE}" \
                   | ${FZF} \
                       --query="$*" \
                       --header="${FZF_HEADER}" \
                       --bind="load:pos($FZFPOS_STATUS)" \
                       --bind="alt-r:execute(bash -c edit_translate_all_rft)" \
                       --bind="alt-t:execute(bash -c edit_translate_already_translated)" \
                       --bind="alt-g:execute(edit_grepped)" \
                       --bind="alt-s:execute(vimdiff -c 'syntax off' {de,en}/src/SUMMARY.md)" \
                       --preview='V={}; __list_files_with_status "$V"')
        set --

        # Note: If it's not possible to use fzf in version 0.53 or higher,
        #       the line above calling vimdiff needs to be changed to:
        #
        #       --bind="alt-s:execute(vimdiff -c 'syntax off' {de,en}/src/SUMMARY.md < /dev/tty > /dev/tty 2>&1 )" \
        #
        # Explanations see here:
        #   https://github.com/junegunn/fzf/issues/1593
        #   https://github.com/junegunn/fzf/issues/1360.
        #   https://github.com/junegunn/fzf/issues/1361

        [ -z "$STATUS" ] && break

        VALUE=$( get_escaped_status "$STATUS" )

        unset FZFPOS_STATUS
        # remember position of (first) selected entry to be able to re-position fzf to it
        if [[ -f "${TMPFILE}" ]] ; then
            FZFPOS_STATUS=$( grep -E -- "${VALUE}" < <(nl "${TMPFILE}") | awk '{print $1}' )
            rm -f "${TMPFILE}"
        fi

        FZF_HEADER=">> Please select file(s) to edit and press ENTER. (ESC to cancel.) <<"
        while true; do
            TMPFILE=$( mktemp tmp.XXXXXXXX )
            # Solutions for opening multiple file found here:
            # https://github-wiki-see.page/m/junegunn/fzf/wiki/examples (Section "Opening files")
            # Otherwise the LFs aren't interpreted correctly by the editor.
            # But shellcheck complained with SC2207...  https://www.shellcheck.net/wiki/SC2207
            # And so it is now:
            mapfile -t FILES < <(__list_files_with_status "${STATUS}" \
                                 | sort | tee "${TMPFILE}" \
                                 | ${FZF_MULTI} \
                                      --header="${FZF_HEADER}" \
                                      --bind="load:pos($FZFPOS_FILE)" \
                                      --preview='cat {}')
            [[ "${FILES[*]}" ]] || break
            unset FZFPOS_FILE
            # remember position of (first) selected entry to be able to re-position fzf to it
            if [[ -f "${TMPFILE}" ]] ; then
                FZFPOS_FILE=$( grep "${FILES[0]}" < <(nl "${TMPFILE}") | awk '{print $1}' )
                rm -f "${TMPFILE}"
            fi
            ${EDIT_IN_TABS} "${FILES[@]}"
        done
        [[ -f "${TMPFILE}" ]] && rm -f "${TMPFILE}"
        unset FZFPOS_FILE
    done
    [[ -f "${TMPFILE}" ]] && rm -f "${TMPFILE}"
    unset FZFPOS_STATUS
}


alias vibs='EDIT_IN_TABS="vim -p" edit_by_status'
alias virf='edit_grepped'


check_ssh_id() {
    IDFILE="$1"
    [ -f "$IDFILE" ] || return 1
    echo "$2"
    if ! ssh-add -T "$IDFILE" 2>/dev/null
    then
        ssh-add "$IDFILE"
    fi
    ssh-add -T "$IDFILE"
}

if [[ -f .private-conf.sh ]] ; then
    echo "*** Check/unlock SSH keys (and set possibly more private settings):"
    echo ""
    # Examples, can/should be set to real values in .private-conf.sh
    #check_ssh_id  ~/.ssh/id_my_github    "Checking ssh key(s) for GitHub ..."
    #check_ssh_id  ~/.ssh/id_my_webserver "Checking ssh key(s) for webserver ..."
    #export WEBSERVER="user:DUMMYPASSWORD@myserver.com"
    #export WEBSERVER_ROOTDIR="httpdocs"
    source .private-conf.sh
fi

[[ $PATH =~ ^./bin: ]] || export PATH=./bin:$PATH

cat <<EOF


*******************************************************************************

This project directory is for maintaining the 'raspiBackup' documentation.

A new command (alias) 'vibs' is defined now. ("vi by status")

It starts a TUI for selecting files by their status for normal editing.

Within the main screen of the TUI there are additional hotkeys active:

  * Alt-R / Alt-T for more selection screens, meant for supporting translation.
    They list files "(R)eady for translation" / "(T)ranslated" and open
    the selected file in both language versions in a split editor window.

  * Alt-S for calling 'vimdiff' with the (S)UMMARY.md files of both languages.

  * Alt-G for calling an interactive (G)rep-Tool using ripgrep, fzf and vim

*******************************************************************************


EOF
