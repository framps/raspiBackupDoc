#!/usr/bin/env bash
# vim: set expandtab:

# Note: ripgrep(rg) respects e.g. '.gitignore', so possibly ignored file therein
#       are ignored by ripgrep as well!
#
# Note: There might be an optional file '.rgignore' in the project root directory.
#       It contains file names to be ignored by ripgrep (rg). One per line.
#       That way it's possible to exclude e.g. the meta docu (README.md etc.)
#       to be listed as well when using the below helper tools.
#       But that does only work as intended, as long there are no commandline
#       parameters regarding files to search (like --glob)!
#       In contrast: --type=markdown is okay here.
#
# Note: Some hints regarding different editors:
#       Open two files with vertical split, if possible:
#           - vim -O <file> <file>
#           - micro -multiopen=vsplit <file> <file>
#       Geany doesn't have a real split window feature
#           - geany <file> <file>

EDIT_IN_SPLIT_WINDOWS="vim -O"
EDIT_IN_TABS="vim -p"

MISSING=()
for TOOL in fzf rg ; do
    if ! command -pv "$TOOL" >/dev/null; then
        echo "$TOOL can't be found!"
        MISSING+=("$TOOL")
    fi
done
if [[ "${MISSING[*]}" ]] ; then
    echo "The programs 'fzf' (fuzzy finder) and 'ripgrep'/'rg' are required!"
    echo "Please install: ${MISSING[*]}. Usually using your distros package management."
    return 1
fi

echo -e "\n*** Define helpful functions and aliases:\n"

edit_translate_by_status() {
    if command -pv fzf >/dev/null ; then
        while true; do
            FILE=$(cd de/src || exit
                   rg --type=markdown --no-ignore-parent --files-with-matches "$1" \
                   | sort \
                   | fzf --reverse --exact --preview='cat {}' --header="$FZF_HEADER")
            [ -z "$FILE" ] && break
            ${EDIT_IN_SPLIT_WINDOWS} {de,en}/src/"$FILE"
        done
    else
        (cd de/src || exit
         rg --type=markdown --no-ignore-parent --files-with-matches "$1" \
         | sort)
        read -r -p "Continue? ENTER, or Ctrl-C to cancel: " inp
        for FILE in $(cd de/src || exit
                      rg --type=markdown --no-ignore-parent --files-with-matches "$1" \
                      | sort)
        do
            ${EDIT_IN_SPLIT_WINDOWS} {de,en}/src/"$FILE"
            echo ""
            read -r -p "Continue? ENTER, or Ctrl-C to cancel: " inp
            echo  "$inp"
        done
    fi
}

edit_translate_already_translated() {
    FZF_HEADER=">> Please select file to check translation and press ENTER. (ESC to cancel.) <<"
    edit_translate_by_status "^\[\.status\]:\s\s*translated"
}

edit_translate_all_rft() {
    FZF_HEADER=">> Please select file to translate and press ENTER. (ESC to cancel.) <<"
    edit_translate_by_status " rft"
}


edit_by_status() {
    if command -pv fzf >/dev/null ; then
        while true; do
            shopt -s extglob
            WITHOUT_STATUS=$(rg --type=markdown --no-ignore-parent --files-without-match "^\[\.status\]:" | wc -l)
            # shellcheck disable=2016  # Expressions don't expand in single quotes, use double quotes for that.
            # Because that string is passed to fzf's preview option!
            STATUS=$( (rg --type=markdown --no-ignore-parent --no-filename "^\[\.status\]:" \
                       | sort | uniq -c
                       printf "%7d %s" "${WITHOUT_STATUS}" "[]: --NO-STATUS--") \
                      | fzf --reverse --select-1 --exact \
                            --preview='V={}; V="${V#*\]:}"; V=${V//\?/.} ; \
                                       (if [ "${V}" == " --NO-STATUS--" ] ; then \
                                            rg --type=markdown --no-ignore-parent --files-without-match "^\[\.status\]:" ; \
                                        else \
                                            rg --type=markdown --no-ignore-parent --files-with-matches  "^\[\.status\]:${V}$" ; \
                                        fi) | sort' \
                            --header=">> Please select status and press ENTER to list and edit corresponding files. (ESC to cancel.) <<")
            [ -z "$STATUS" ] && break
            # Remove the prefix to keep only the status text itself
            VALUE="${STATUS#*\]:}"
            # Substitute any '?' with '.' because a '?' would break the regex below.
            VALUE=${VALUE//\?/.}
            while true; do
                if [ "${VALUE}" == " --NO-STATUS--" ] ; then
                    mapfile -t FILES < <(rg --type=markdown --no-ignore-parent --files-without-match "^\[\.status\]:" \
                                         | sort \
                                         | fzf --reverse --exact --multi --bind alt-a:select-all,alt-d:deselect-all \
                                               --preview='cat {}' \
                                               --header=">> Please select file(s) to edit and press ENTER. (ESC to cancel.) <<")
                else
                    # Solutions for opening multiple file found here:
                    # https://github-wiki-see.page/m/junegunn/fzf/wiki/examples (Section "Opening files")
                    # Otherwise the LFs aren't interpreted correctly by the editor.
                    # But shellcheck complained with SC2207...  https://www.shellcheck.net/wiki/SC2207
                    # And so it is now:
                    mapfile -t FILES < <(rg --type=markdown --no-ignore-parent --files-with-matches "^\[\.status\]:${VALUE}$"\
                                         | sort \
                                         | fzf --reverse --exact --multi --bind alt-a:select-all,alt-d:deselect-all \
                                               --preview='cat {}' \
                                               --header=">> Please select file(s) to edit and press ENTER. (ESC to cancel.) <<")
                fi
                [[ "${FILES[*]}" ]] || break
                ${EDIT_IN_TABS} "${FILES[@]}"
            done
        done
    fi
}


alias vibs='EDIT_IN_TABS="vim -p" edit_by_status'
alias vitar='EDIT_IN_SPLIT_WINDOWS="vim -O" edit_translate_all_rft'
alias vitat='EDIT_IN_SPLIT_WINDOWS="vim -O" edit_translate_already_translated'
alias vids='vimdiff -c "syntax off" {de,en}/src/SUMMARY.md'

alias mibs='EDIT_IN_TABS="micro" edit_by_status'
alias mitar='EDIT_IN_SPLIT_WINDOWS="micro -multiopen=vsplit" edit_translate_all_rft'
alias mitat='EDIT_IN_SPLIT_WINDOWS="micro -multiopen=vsplit" edit_translate_already_translated'

alias gebs='EDIT_IN_TABS="geany" edit_by_status'
alias getar='EDIT_IN_SPLIT_WINDOWS="geany" edit_translate_all_rft'
alias getat='EDIT_IN_SPLIT_WINDOWS="geany" edit_translate_already_translated'

alias vibs
alias vitar
alias vitat
alias vids

echo ""

alias mibs
alias mitar
alias mitat

echo ""

alias gebs
alias getar
alias getat

echo ""
echo ""


check_ssh_id() {
    IDFILE="$1"
    [ -f "$IDFILE" ] || return 1
    echo "$2"
    if ! ssh-add -T "$IDFILE" 2>/dev/null
    then
        ssh-add "$IDFILE"
    fi
    ssh-add -T "$IDFILE"
}

echo "*** Check/unlock SSH keys (and set possibly more private settings):"
echo ""

# Examples, can/should be set to real values in .private-conf.sh
#check_ssh_id  ~/.ssh/id_my_github    "Checking ssh key(s) for GitHub ..."
#check_ssh_id  ~/.ssh/id_my_webserver "Checking ssh key(s) for webserver ..."
#export WEBSERVER="user:DUMMYPASSWORD@myserver.com"
#export WEBSERVER_ROOTDIR="httpdocs"
[[ -f .private-conf.sh ]] && source .private-conf.sh

cat <<EOF


*******************************************************************************

This project directory is for maintaining the 'raspiBackup' documentation.

There are some aliases defined as shown above.

The directory is tracked by git and is connected to the git repo listed below.

*******************************************************************************


EOF

